# Generated by Django 3.0.2 on 2020-01-17 18:01

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Edocument',
            fields=[
                ('edocument_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('edocument_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('edocument', models.BinaryField(blank=True, null=True)),
                ('edoc_type', models.CharField(blank=True, max_length=255, null=True)),
                ('ver', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'edocument',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Files',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'files',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LoadChemInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chemicalname', models.CharField(blank=True, db_column='ChemicalName', max_length=255, null=True)),
                ('chemicalabbreviation', models.CharField(blank=True, db_column='ChemicalAbbreviation', max_length=255, null=True)),
                ('molecularweight', models.CharField(blank=True, db_column='MolecularWeight', max_length=255, null=True)),
                ('density', models.CharField(blank=True, db_column='Density', max_length=255, null=True)),
                ('inchi', models.CharField(blank=True, db_column='InChI', max_length=255, null=True)),
                ('inchikey', models.CharField(blank=True, db_column='InChIKey', max_length=255, null=True)),
                ('chemicalcategory', models.CharField(blank=True, db_column='ChemicalCategory', max_length=255, null=True)),
                ('canonicalsmiles', models.CharField(blank=True, db_column='CanonicalSMILES', max_length=255, null=True)),
                ('molecularformula', models.CharField(blank=True, db_column='MolecularFormula', max_length=255, null=True)),
                ('pubchemid', models.CharField(blank=True, db_column='PubChemID', max_length=255, null=True)),
                ('catalogdescr', models.CharField(blank=True, db_column='CatalogDescr', max_length=255, null=True)),
                ('synonyms', models.CharField(blank=True, db_column='Synonyms', max_length=255, null=True)),
                ('catalogno', models.CharField(blank=True, db_column='CatalogNo', max_length=255, null=True)),
                ('sigma_aldrich_url', models.CharField(blank=True, db_column='Sigma-Aldrich URL', max_length=255, null=True)),
                ('primaryinformationsource', models.CharField(blank=True, db_column='PrimaryInformationSource', max_length=255, null=True)),
                ('standardizedsmiles', models.CharField(blank=True, db_column='StandardizedSMILES', max_length=255, null=True)),
            ],
            options={
                'db_table': 'load_chem_inventory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LoadDirfiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'load_dirfiles',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LoadExpdataJson',
            fields=[
                ('uid', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('exp_json', models.TextField(blank=True, null=True)),
                ('add_dt', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'load_EXPDATA_JSON',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LoadHcInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reagent', models.CharField(max_length=255)),
                ('part_no', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.FloatField(blank=True, null=True)),
                ('units', models.CharField(blank=True, max_length=255, null=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'load_hc_inventory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LoadLblInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reagent', models.CharField(max_length=255)),
                ('part_no', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.FloatField(blank=True, null=True)),
                ('units', models.CharField(blank=True, max_length=255, null=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'load_lbl_inventory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LoadPerovDesc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_raw_inchikey', models.CharField(blank=True, db_column='_raw_inchikey', max_length=255, null=True)),
                ('field_raw_smiles', models.CharField(blank=True, db_column='_raw_smiles', max_length=255, null=True)),
                ('field_raw_molweight', models.DecimalField(blank=True, db_column='_raw_molweight', decimal_places=0, max_digits=255, null=True)),
                ('field_raw_smiles_standard', models.CharField(blank=True, db_column='_raw_smiles_standard', max_length=255, null=True)),
                ('field_raw_standard_molweight', models.DecimalField(blank=True, db_column='_raw_standard_molweight', decimal_places=0, max_digits=255, null=True)),
                ('field_prototype_ecpf4_256_6', models.CharField(blank=True, db_column='_prototype_ecpf4_256_6', max_length=256, null=True)),
                ('field_feat_atomcount_c', models.DecimalField(blank=True, db_column='_feat_atomcount_c', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_atomcount_n', models.DecimalField(blank=True, db_column='_feat_atomcount_n', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_avgpol', models.DecimalField(blank=True, db_column='_feat_avgpol', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_molpol', models.DecimalField(blank=True, db_column='_feat_molpol', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_refractivity', models.DecimalField(blank=True, db_column='_feat_refractivity', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_aliphaticringcount', models.DecimalField(blank=True, db_column='_feat_aliphaticringcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_aromaticringcount', models.DecimalField(blank=True, db_column='_feat_aromaticringcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_aliphaticatomcount', models.DecimalField(blank=True, db_column='_feat_aliphaticatomcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_aromaticatomcount', models.DecimalField(blank=True, db_column='_feat_aromaticatomcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_bondcount', models.DecimalField(blank=True, db_column='_feat_bondcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_carboaliphaticringcount', models.DecimalField(blank=True, db_column='_feat_carboaliphaticringcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_carboaromaticringcount', models.DecimalField(blank=True, db_column='_feat_carboaromaticringcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_carboringcount', models.DecimalField(blank=True, db_column='_feat_carboringcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_chainatomcount', models.DecimalField(blank=True, db_column='_feat_chainatomcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_chiralcentercount', models.DecimalField(blank=True, db_column='_feat_chiralcentercount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_ringatomcount', models.DecimalField(blank=True, db_column='_feat_ringatomcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_smallestringsize', models.DecimalField(blank=True, db_column='_feat_smallestringsize', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_largestringsize', models.DecimalField(blank=True, db_column='_feat_largestringsize', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_heteroaliphaticringcount', models.DecimalField(blank=True, db_column='_feat_heteroaliphaticringcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_heteroaromaticringcount', models.DecimalField(blank=True, db_column='_feat_heteroaromaticringcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_rotatablebondcount', models.DecimalField(blank=True, db_column='_feat_rotatablebondcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_balabanindex', models.DecimalField(blank=True, db_column='_feat_balabanindex', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_cyclomaticnumber', models.DecimalField(blank=True, db_column='_feat_cyclomaticnumber', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_hyperwienerindex', models.DecimalField(blank=True, db_column='_feat_hyperwienerindex', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_wienerindex', models.DecimalField(blank=True, db_column='_feat_wienerindex', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_wienerpolarity', models.DecimalField(blank=True, db_column='_feat_wienerpolarity', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_minimalprojectionarea', models.DecimalField(blank=True, db_column='_feat_minimalprojectionarea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_maximalprojectionarea', models.DecimalField(blank=True, db_column='_feat_maximalprojectionarea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_minimalprojectionradius', models.DecimalField(blank=True, db_column='_feat_minimalprojectionradius', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_maximalprojectionradius', models.DecimalField(blank=True, db_column='_feat_maximalprojectionradius', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_lengthperpendiculartotheminarea', models.DecimalField(blank=True, db_column='_feat_lengthperpendiculartotheminarea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_lengthperpendiculartothemaxarea', models.DecimalField(blank=True, db_column='_feat_lengthperpendiculartothemaxarea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_vanderwaalsvolume', models.DecimalField(blank=True, db_column='_feat_vanderwaalsvolume', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_vanderwaalssurfacearea', models.DecimalField(blank=True, db_column='_feat_vanderwaalssurfacearea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_asa', models.DecimalField(blank=True, db_column='_feat_asa', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_asa_field', models.DecimalField(blank=True, db_column='_feat_asa+', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_asa_field_0', models.DecimalField(blank=True, db_column='_feat_asa-', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_asa_h', models.DecimalField(blank=True, db_column='_feat_asa_h', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_asa_p', models.DecimalField(blank=True, db_column='_feat_asa_p', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_polarsurfacearea', models.DecimalField(blank=True, db_column='_feat_polarsurfacearea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_acceptorcount', models.DecimalField(blank=True, db_column='_feat_acceptorcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_accsitecount', models.DecimalField(blank=True, db_column='_feat_accsitecount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_donorcount', models.DecimalField(blank=True, db_column='_feat_donorcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_donsitecount', models.DecimalField(blank=True, db_column='_feat_donsitecount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_nh2', models.DecimalField(blank=True, db_column='_feat_fr_nh2', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_nh1', models.DecimalField(blank=True, db_column='_feat_fr_nh1', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_nh0', models.DecimalField(blank=True, db_column='_feat_fr_nh0', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_quatn', models.DecimalField(blank=True, db_column='_feat_fr_quatn', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_arn', models.DecimalField(blank=True, db_column='_feat_fr_arn', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_ar_nh', models.DecimalField(blank=True, db_column='_feat_fr_ar_nh', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_imine', models.DecimalField(blank=True, db_column='_feat_fr_imine', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_amidine', models.DecimalField(blank=True, db_column='_feat_fr_amidine', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_dihydropyridine', models.DecimalField(blank=True, db_column='_feat_fr_dihydropyridine', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_guanido', models.DecimalField(blank=True, db_column='_feat_fr_guanido', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_piperdine', models.DecimalField(blank=True, db_column='_feat_fr_piperdine', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_piperzine', models.DecimalField(blank=True, db_column='_feat_fr_piperzine', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_pyridine', models.DecimalField(blank=True, db_column='_feat_fr_pyridine', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_maximalprojectionsize', models.DecimalField(blank=True, db_column='_feat_maximalprojectionsize', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_minimalprojectionsize', models.DecimalField(blank=True, db_column='_feat_minimalprojectionsize', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_molsurfaceareavdwp', models.DecimalField(blank=True, db_column='_feat_molsurfaceareavdwp', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_msareavdwp', models.DecimalField(blank=True, db_column='_feat_msareavdwp', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_molsurfaceareaasap', models.DecimalField(blank=True, db_column='_feat_molsurfaceareaasap', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_msareaasap', models.DecimalField(blank=True, db_column='_feat_msareaasap', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_protpolarsurfacearea', models.DecimalField(blank=True, db_column='_feat_protpolarsurfacearea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_protpsa', models.DecimalField(blank=True, db_column='_feat_protpsa', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_hacceptorcount', models.DecimalField(blank=True, db_column='_feat_hacceptorcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_hdonorcount', models.DecimalField(blank=True, db_column='_feat_hdonorcount', decimal_places=0, max_digits=255, null=True)),
            ],
            options={
                'db_table': 'load_perov_desc',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LoadPerovDescDef',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('calc_definition', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('systemtool_name', models.CharField(blank=True, max_length=255, null=True)),
                ('systemtool_ver', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'load_perov_desc_def',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('material_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('material_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(max_length=255)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'material',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MDescriptorValue',
            fields=[
                ('m_descriptor_value_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('m_descriptor_value_uuid', models.UUIDField(blank=True, null=True)),
                ('num_value', models.FloatField(blank=True, null=True)),
                ('blob_value', models.BinaryField(blank=True, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'm_descriptor_value',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Measure',
            fields=[
                ('measure_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('measure_uuid', models.UUIDField(blank=True, null=True)),
                ('measure_type_id', models.BigIntegerField(blank=True, null=True)),
                ('amount', models.FloatField(blank=True, null=True)),
                ('unit', models.CharField(blank=True, max_length=255, null=True)),
                ('blob_amount', models.BinaryField(blank=True, null=True)),
                ('document_id', models.BigIntegerField(blank=True, null=True)),
                ('note_id', models.BigIntegerField(blank=True, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'measure',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('note_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('note_uuid', models.UUIDField(blank=True, null=True)),
                ('notetext', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('edocument', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Edocument')),
            ],
            options={
                'db_table': 'note',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('organization_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('organization_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('full_name', models.CharField(max_length=255)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('address1', models.CharField(blank=True, max_length=255, null=True)),
                ('address2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state_province', models.CharField(blank=True, max_length=3, null=True)),
                ('zip', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('website_url', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note')),
            ],
            options={
                'db_table': 'organization',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('status_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'status',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TagType',
            fields=[
                ('tag_type_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('tag_type_uuid', models.UUIDField(blank=True, null=True)),
                ('short_desscription', models.CharField(blank=True, max_length=32, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'tag_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TriggerTest',
            fields=[
                ('tt_id', models.AutoField(primary_key=True, serialize=False)),
                ('smiles', models.TextField(blank=True, null=True)),
                ('val', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'trigger_test',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('tag_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note')),
                ('tag_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.TagType')),
            ],
            options={
                'db_table': 'tag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SystemtoolType',
            fields=[
                ('systemtool_type_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('systemtool_type_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note')),
            ],
            options={
                'db_table': 'systemtool_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Systemtool',
            fields=[
                ('systemtool_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('systemtool_uuid', models.UUIDField(blank=True, null=True)),
                ('systemtool_name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('vendor', models.CharField(blank=True, max_length=255, null=True)),
                ('model', models.CharField(blank=True, max_length=255, null=True)),
                ('serial', models.CharField(blank=True, max_length=255, null=True)),
                ('ver', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Organization')),
                ('systemtool_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.SystemtoolType')),
            ],
            options={
                'db_table': 'systemtool',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('person_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('person_uuid', models.UUIDField(blank=True, null=True)),
                ('firstname', models.CharField(blank=True, max_length=255, null=True)),
                ('lastname', models.CharField(max_length=255)),
                ('middlename', models.CharField(blank=True, max_length=255, null=True)),
                ('address1', models.CharField(blank=True, max_length=255, null=True)),
                ('address2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('stateprovince', models.CharField(blank=True, max_length=3, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('suffix', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Organization')),
            ],
            options={
                'db_table': 'person',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasureType',
            fields=[
                ('measure_type_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('measure_type_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note')),
            ],
            options={
                'db_table': 'measure_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MDescriptorClass',
            fields=[
                ('m_descriptor_class_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('m_descriptor_class_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note')),
            ],
            options={
                'db_table': 'm_descriptor_class',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MaterialType',
            fields=[
                ('material_type_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('material_type_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note')),
            ],
            options={
                'db_table': 'material_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MaterialName',
            fields=[
                ('material_name_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('material_name_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('material_name_type', models.CharField(blank=True, max_length=255, null=True)),
                ('reference', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Material')),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Status')),
            ],
            options={
                'db_table': 'material_name',
                'managed': True,
                'unique_together': {('description', 'material_name_type')},
            },
        ),
        migrations.AddField(
            model_name='material',
            name='note',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note'),
        ),
        migrations.AddField(
            model_name='material',
            name='parent_material',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Material'),
        ),
        migrations.AddField(
            model_name='material',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Status'),
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('actor_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('actor_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Organization')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Person')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Status')),
                ('systemtool', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Systemtool')),
            ],
            options={
                'db_table': 'actor',
                'managed': True,
                'unique_together': {('person', 'organization', 'systemtool')},
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('person', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Person')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MDescriptorDef',
            fields=[
                ('m_descriptor_def_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('m_descriptor_def_uuid', models.UUIDField(blank=True, null=True)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('calc_definition', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=1023, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Actor')),
                ('m_descriptor_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.MDescriptorClass')),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note')),
            ],
            options={
                'db_table': 'm_descriptor_def',
                'managed': True,
                'unique_together': {('actor', 'calc_definition')},
            },
        ),
        migrations.CreateModel(
            name='MDescriptor',
            fields=[
                ('m_descriptor_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('m_descriptor_uuid', models.UUIDField(blank=True, null=True)),
                ('material_name_type', models.CharField(blank=True, max_length=255, null=True)),
                ('m_descriptor_def_id', models.BigIntegerField(blank=True, null=True)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('num_value', models.TextField(blank=True, null=True)),
                ('blob_value', models.BinaryField(blank=True, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('material_name_description', models.ForeignKey(blank=True, db_column='material_name_description', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.MaterialName')),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Status')),
            ],
            options={
                'db_table': 'm_descriptor',
                'managed': True,
                'unique_together': {('material_name_description', 'm_descriptor_def_id')},
            },
        ),
        migrations.CreateModel(
            name='MaterialTypeX',
            fields=[
                ('material_type_x_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('material_type_x_uuid', models.UUIDField(blank=True, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Material')),
                ('material_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.MaterialType')),
            ],
            options={
                'db_table': 'material_type_x',
                'managed': True,
                'unique_together': {('material', 'material_type')},
            },
        ),
        migrations.CreateModel(
            name='MaterialNameX',
            fields=[
                ('material_name_x_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('material_name_x_uuid', models.UUIDField(blank=True, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Material')),
                ('material_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.MaterialName')),
            ],
            options={
                'db_table': 'material_name_x',
                'managed': True,
                'unique_together': {('material', 'material_name')},
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('inventory_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('inventory_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('part_no', models.CharField(blank=True, max_length=255, null=True)),
                ('onhand_amt', models.FloatField(blank=True, null=True)),
                ('unit', models.CharField(blank=True, max_length=255, null=True)),
                ('measure_id', models.BigIntegerField(blank=True, null=True)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('expiration_dt', models.DateTimeField(blank=True, null=True)),
                ('inventory_location', models.CharField(blank=True, max_length=255, null=True)),
                ('document_id', models.BigIntegerField(blank=True, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Actor')),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Material')),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Note')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Status')),
            ],
            options={
                'db_table': 'inventory',
                'managed': True,
                'unique_together': {('material', 'actor', 'create_date')},
            },
        ),
    ]
