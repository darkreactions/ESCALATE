# Generated by Django 2.2.4 on 2020-01-03 22:29

import datetime
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('actor_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('actor_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 505300))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 505300))),
            ],
            options={
                'db_table': 'actor',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Edocument',
            fields=[
                ('edocument_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('edocument_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('edocument', models.BinaryField(blank=True, null=True)),
                ('edoc_type', models.CharField(blank=True, max_length=255, null=True)),
                ('ver', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 505300))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 505300))),
            ],
            options={
                'db_table': 'edocument',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Files',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'files',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('inventory_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('inventory_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('part_no', models.CharField(blank=True, max_length=255, null=True)),
                ('onhand_amt', models.FloatField(blank=True, null=True)),
                ('unit', models.CharField(blank=True, max_length=255, null=True)),
                ('measure_id', models.BigIntegerField(blank=True, null=True)),
                ('create_dt', models.DateTimeField()),
                ('expiration_dt', models.DateTimeField(blank=True, null=True)),
                ('inventory_location', models.CharField(blank=True, max_length=255, null=True)),
                ('document_id', models.BigIntegerField(blank=True, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 506301))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 506301))),
            ],
            options={
                'db_table': 'inventory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadAllaminesTier32',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smiles', models.CharField(blank=True, max_length=1023, null=True)),
            ],
            options={
                'db_table': 'load_allamines_tier3_2',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadAllaminesTier32Out2Desc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smiles', models.CharField(blank=True, max_length=1023, null=True)),
                ('carbo_ring_cnt', models.FloatField(blank=True, null=True)),
                ('chain_atom_cnt', models.FloatField(blank=True, null=True)),
                ('chiral_center_cnt', models.FloatField(blank=True, null=True)),
                ('ring_atom_cnt', models.FloatField(blank=True, null=True)),
                ('smallest_ring_size', models.FloatField(blank=True, null=True)),
                ('largest_ring_size', models.FloatField(blank=True, null=True)),
                ('heteroaliphatic_ring_cnt', models.FloatField(blank=True, null=True)),
                ('heteroaromatic_ring_cnt', models.FloatField(blank=True, null=True)),
                ('rotatable_bond_cnt', models.FloatField(blank=True, null=True)),
                ('balaban_index', models.FloatField(blank=True, null=True)),
                ('cyclomatic_no', models.FloatField(blank=True, null=True)),
                ('hyper_wiener_index', models.FloatField(blank=True, null=True)),
                ('wiener_index', models.FloatField(blank=True, null=True)),
                ('wiener_polarity', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'load_allamines_tier3_2_out_2_desc',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadAllaminesTier32Out3Desc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smiles', models.CharField(blank=True, max_length=1023, null=True)),
                ('van_der_waals_vol', models.FloatField(blank=True, null=True)),
                ('acceptorcount', models.FloatField(blank=True, null=True)),
                ('accsitecount', models.FloatField(blank=True, null=True)),
                ('donorcount', models.FloatField(blank=True, null=True)),
                ('donsitecount', models.FloatField(blank=True, null=True)),
                ('acceptorcount1', models.FloatField(blank=True, null=True)),
                ('donorcount1', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'load_allamines_tier3_2_out_3_desc',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadAllaminesTier32StandardizedK',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smiles', models.CharField(blank=True, max_length=1023, null=True)),
            ],
            options={
                'db_table': 'load_allamines_tier3_2_standardized_k',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadChemInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chemicalname', models.CharField(blank=True, db_column='ChemicalName', max_length=255, null=True)),
                ('chemicalabbreviation', models.CharField(blank=True, db_column='ChemicalAbbreviation', max_length=255, null=True)),
                ('molecularweight', models.CharField(blank=True, db_column='MolecularWeight', max_length=255, null=True)),
                ('density', models.CharField(blank=True, db_column='Density', max_length=255, null=True)),
                ('inchi', models.CharField(blank=True, db_column='InChI', max_length=255, null=True)),
                ('inchikey', models.CharField(blank=True, db_column='InChIKey', max_length=255, null=True)),
                ('chemicalcategory', models.CharField(blank=True, db_column='ChemicalCategory', max_length=255, null=True)),
                ('canonicalsmiles', models.CharField(blank=True, db_column='CanonicalSMILES', max_length=255, null=True)),
                ('molecularformula', models.CharField(blank=True, db_column='MolecularFormula', max_length=255, null=True)),
                ('pubchemid', models.CharField(blank=True, db_column='PubChemID', max_length=255, null=True)),
                ('catalogdescr', models.CharField(blank=True, db_column='CatalogDescr', max_length=255, null=True)),
                ('synonyms', models.CharField(blank=True, db_column='Synonyms', max_length=255, null=True)),
                ('catalogno', models.CharField(blank=True, db_column='CatalogNo', max_length=255, null=True)),
                ('sigma_aldrich_url', models.CharField(blank=True, db_column='Sigma-Aldrich URL', max_length=255, null=True)),
                ('primaryinformationsource', models.CharField(blank=True, db_column='PrimaryInformationSource', max_length=255, null=True)),
            ],
            options={
                'db_table': 'load_chem_inventory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadDirfiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'load_dirfiles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadEmole',
            fields=[
                ('isosmiles', models.CharField(blank=True, max_length=1023, null=True)),
                ('version_id', models.IntegerField(blank=True, null=True)),
                ('parent_id', models.IntegerField(blank=True, null=True)),
                ('smiid', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'load_emole',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadEmoleStandardized',
            fields=[
                ('smiles', models.CharField(blank=True, max_length=1023, null=True)),
                ('smiid', models.BigAutoField(db_column='smiID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'load_emole_standardized',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadExpdataJson',
            fields=[
                ('uid', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('exp_json', models.TextField(blank=True, null=True)),
                ('add_dt', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'load_EXPDATA_JSON',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadHcInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reagent', models.CharField(max_length=255)),
                ('part_no', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.FloatField(blank=True, null=True)),
                ('units', models.CharField(blank=True, max_length=255, null=True)),
                ('update_date', models.DateTimeField()),
                ('create_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'load_hc_inventory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadLblInventory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reagent', models.CharField(max_length=255)),
                ('part_no', models.CharField(blank=True, max_length=255, null=True)),
                ('amount', models.FloatField(blank=True, null=True)),
                ('units', models.CharField(blank=True, max_length=255, null=True)),
                ('update_date', models.DateTimeField()),
                ('create_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'load_lbl_inventory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadPerovDesc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_raw_inchikey', models.CharField(blank=True, db_column='_raw_inchikey', max_length=255, null=True)),
                ('field_raw_smiles', models.CharField(blank=True, db_column='_raw_smiles', max_length=255, null=True)),
                ('field_raw_molweight', models.DecimalField(blank=True, db_column='_raw_molweight', decimal_places=0, max_digits=255, null=True)),
                ('field_raw_smiles_standard', models.CharField(blank=True, db_column='_raw_smiles_standard', max_length=255, null=True)),
                ('field_raw_standard_molweight', models.DecimalField(blank=True, db_column='_raw_standard_molweight', decimal_places=0, max_digits=255, null=True)),
                ('field_prototype_ecpf4_256_6', models.CharField(blank=True, db_column='_prototype_ECPF4_256_6', max_length=256, null=True)),
                ('field_feat_atomcount_c', models.DecimalField(blank=True, db_column='_feat_AtomCount_C', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_atomcount_n', models.DecimalField(blank=True, db_column='_feat_AtomCount_N', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_avgpol', models.DecimalField(blank=True, db_column='_feat_AvgPol', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_molpol', models.DecimalField(blank=True, db_column='_feat_MolPol', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_refractivity', models.DecimalField(blank=True, db_column='_feat_Refractivity', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_aliphaticringcount', models.DecimalField(blank=True, db_column='_feat_AliphaticRingCount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_aromaticringcount', models.DecimalField(blank=True, db_column='_feat_AromaticRingCount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_aliphatic_atomcount', models.DecimalField(blank=True, db_column='_feat_Aliphatic AtomCount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_aromaticatomcount', models.DecimalField(blank=True, db_column='_feat_AromaticAtomCount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_bondcount', models.DecimalField(blank=True, db_column='_feat_BondCount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_carboaliphaticringcount', models.DecimalField(blank=True, db_column='_feat_CarboaliphaticRingCount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_carboaromaticringcount', models.DecimalField(blank=True, db_column='_feat_CarboaromaticRingCount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_carboringcount', models.DecimalField(blank=True, db_column='_feat_CarboRingCount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_chainatomcount', models.DecimalField(blank=True, db_column='_feat_ChainAtomCount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_chiralcentercount', models.DecimalField(blank=True, db_column='_feat_ChiralCenterCount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_ringatomcount', models.DecimalField(blank=True, db_column='_feat_RingAtomCount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_smallestringsize', models.DecimalField(blank=True, db_column='_feat_SmallestRingSize', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_largestringsize', models.DecimalField(blank=True, db_column='_feat_LargestRingSize', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_heteroaliphaticringcount', models.DecimalField(blank=True, db_column='_feat_HeteroaliphaticRingCount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_heteroaromaticring_count', models.DecimalField(blank=True, db_column='_feat_HeteroaromaticRing Count', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_rotatablebondcount', models.DecimalField(blank=True, db_column='_feat_RotatableBondCount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_balabanindex', models.DecimalField(blank=True, db_column='_feat_BalabanIndex', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_cyclomaticnumber', models.DecimalField(blank=True, db_column='_feat_CyclomaticNumber', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_hyperwienerindex', models.DecimalField(blank=True, db_column='_feat_HyperWienerIndex', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_wienerindex', models.DecimalField(blank=True, db_column='_feat_WienerIndex', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_wienerpolarity', models.DecimalField(blank=True, db_column='_feat_WienerPolarity', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_minimalprojectionarea', models.DecimalField(blank=True, db_column='_feat_MinimalProjectionArea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_maximalprojectionarea', models.DecimalField(blank=True, db_column='_feat_MaximalProjectionArea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_minimalprojectionradius', models.DecimalField(blank=True, db_column='_feat_MinimalProjectionRadius', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_maximalprojectionradius', models.DecimalField(blank=True, db_column='_feat_MaximalProjectionRadius', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_lengthperpendiculartotheminarea', models.DecimalField(blank=True, db_column='_feat_LengthPerpendicularToTheMinArea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_lengthperpendiculartothemaxarea', models.DecimalField(blank=True, db_column='_feat_LengthPerpendicularToTheMaxArea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_vanderwaalsvolume', models.DecimalField(blank=True, db_column='_feat_VanderWaalsVolume', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_vanderwaalssurfacearea', models.DecimalField(blank=True, db_column='_feat_VanderWaalsSurfaceArea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_asa', models.DecimalField(blank=True, db_column='_feat_ASA', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_asa_field', models.DecimalField(blank=True, db_column='_feat_ASA+', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_asa_field_0', models.DecimalField(blank=True, db_column='_feat_ASA-', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_asa_h', models.DecimalField(blank=True, db_column='_feat_ASA_H', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_asa_p', models.DecimalField(blank=True, db_column='_feat_ASA_P', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_polarsurfacearea', models.DecimalField(blank=True, db_column='_feat_PolarSurfaceArea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_acceptorcount', models.DecimalField(blank=True, db_column='_feat_acceptorcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_accsitecount', models.DecimalField(blank=True, db_column='_feat_Accsitecount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_donorcount', models.DecimalField(blank=True, db_column='_feat_donorcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_donsitecount', models.DecimalField(blank=True, db_column='_feat_donsitecount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_nh2', models.DecimalField(blank=True, db_column='_feat_fr_NH2', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_nh1', models.DecimalField(blank=True, db_column='_feat_fr_NH1', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_nh0', models.DecimalField(blank=True, db_column='_feat_fr_NH0', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_quatn', models.DecimalField(blank=True, db_column='_feat_fr_quatN', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_arn', models.DecimalField(blank=True, db_column='_feat_fr_ArN', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_ar_nh', models.DecimalField(blank=True, db_column='_feat_fr_Ar_NH', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_imine', models.DecimalField(blank=True, db_column='_feat_fr_Imine', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_amidine', models.DecimalField(blank=True, db_column='_feat_fr_amidine', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_dihydropyridine', models.DecimalField(blank=True, db_column='_feat_fr_dihydropyridine', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_guanido', models.DecimalField(blank=True, db_column='_feat_fr_guanido', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_piperdine', models.DecimalField(blank=True, db_column='_feat_fr_piperdine', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_piperzine', models.DecimalField(blank=True, db_column='_feat_fr_piperzine', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_fr_pyridine', models.DecimalField(blank=True, db_column='_feat_fr_pyridine', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_maximalprojectionsize', models.DecimalField(blank=True, db_column='_feat_maximalprojectionsize', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_minimalprojectionsize', models.DecimalField(blank=True, db_column='_feat_minimalprojectionsize', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_molsurfaceareavdwp', models.DecimalField(blank=True, db_column='_feat_molsurfaceareaVDWp', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_msareavdwp', models.DecimalField(blank=True, db_column='_feat_msareaVDWp', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_molsurfaceareaasap', models.DecimalField(blank=True, db_column='_feat_molsurfaceareaASAp', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_msareaasap', models.DecimalField(blank=True, db_column='_feat_msareaASAp', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_protpolarsurfacearea', models.DecimalField(blank=True, db_column='_feat_ProtPolarSurfaceArea', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_protpsa', models.DecimalField(blank=True, db_column='_feat_Protpsa', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_hacceptorcount', models.DecimalField(blank=True, db_column='_feat_Hacceptorcount', decimal_places=0, max_digits=255, null=True)),
                ('field_feat_hdonorcount', models.DecimalField(blank=True, db_column='_feat_Hdonorcount', decimal_places=0, max_digits=255, null=True)),
            ],
            options={
                'db_table': 'load_perov_desc',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadVersion2Out1Desc',
            fields=[
                ('sid', models.BigAutoField(primary_key=True, serialize=False)),
                ('smiles', models.CharField(blank=True, max_length=1023, null=True)),
                ('molecular_weight', models.FloatField(blank=True, null=True)),
                ('atom_count_c', models.FloatField(blank=True, null=True)),
                ('atom_count_n', models.FloatField(blank=True, null=True)),
                ('avg_pol', models.FloatField(blank=True, null=True)),
                ('mol_pol', models.FloatField(blank=True, null=True)),
                ('refractivity', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'load_version2_out_1_desc',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadVersion2Out2Desc',
            fields=[
                ('sid', models.BigAutoField(primary_key=True, serialize=False)),
                ('smiles', models.CharField(blank=True, max_length=1023, null=True)),
                ('aliphatic_ring_cnt', models.FloatField(blank=True, null=True)),
                ('aromatic_ring_cnt', models.FloatField(blank=True, null=True)),
                ('aliphatic_atom_cnt', models.FloatField(blank=True, null=True)),
                ('aromatic_atom_cnt', models.FloatField(blank=True, null=True)),
                ('bond_cnt', models.FloatField(blank=True, null=True)),
                ('carboaliphatic_ring_cnt', models.FloatField(blank=True, null=True)),
                ('carboaromatic_ring_cnt', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'load_version2_out_2_desc',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadVersion2Out3EcpfDesc',
            fields=[
                ('sid', models.BigAutoField(primary_key=True, serialize=False)),
                ('ecpf_256_6', models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={
                'db_table': 'load_version2_out_3_ecpf_desc',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadVersion2Smiles',
            fields=[
                ('sid', models.BigAutoField(primary_key=True, serialize=False)),
                ('smiles', models.CharField(blank=True, max_length=1023, null=True)),
                ('version_id', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_id', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'load_version2_smiles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadVersion2SmilesName',
            fields=[
                ('sid', models.BigAutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=2047, null=True)),
            ],
            options={
                'db_table': 'load_version2_smiles_name',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadVersion2SmilesStandardK',
            fields=[
                ('sid', models.BigAutoField(primary_key=True, serialize=False)),
                ('smiles_standard_k', models.CharField(blank=True, max_length=1023, null=True)),
            ],
            options={
                'db_table': 'load_version2_smiles_standard_k',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LoadVersion2SmilesStandardKName',
            fields=[
                ('sid', models.BigAutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=2047, null=True)),
            ],
            options={
                'db_table': 'load_version2_smiles_standard_k_name',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('material_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('material_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(max_length=255)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 515253))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 515253))),
            ],
            options={
                'db_table': 'material',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MaterialName',
            fields=[
                ('material_name_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('material_name_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('material_name_type', models.CharField(blank=True, max_length=255, null=True)),
                ('reference', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 516253))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 516253))),
            ],
            options={
                'db_table': 'material_name',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MaterialRef',
            fields=[
                ('material_ref_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('material_ref_uuid', models.UUIDField(blank=True, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 516253))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 516253))),
            ],
            options={
                'db_table': 'material_ref',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MaterialType',
            fields=[
                ('material_type_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('material_type_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 517254))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 517254))),
            ],
            options={
                'db_table': 'material_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MDescriptor',
            fields=[
                ('m_descriptor_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('m_descriptor_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('ver', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 514253))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 514253))),
            ],
            options={
                'db_table': 'm_descriptor',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MDescriptorClass',
            fields=[
                ('m_descriptor_class_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('m_descriptor_class_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 514253))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 514253))),
            ],
            options={
                'db_table': 'm_descriptor_class',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MDescriptorValue',
            fields=[
                ('m_descriptor_value_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('m_descriptor_value_uuid', models.UUIDField(blank=True, null=True)),
                ('num_value', models.FloatField(blank=True, null=True)),
                ('blob_value', models.BinaryField(blank=True, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 515253))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 515253))),
            ],
            options={
                'db_table': 'm_descriptor_value',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Measure',
            fields=[
                ('measure_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('measure_uuid', models.UUIDField(blank=True, null=True)),
                ('measure_type_id', models.BigIntegerField(blank=True, null=True)),
                ('amount', models.FloatField(blank=True, null=True)),
                ('unit', models.CharField(blank=True, max_length=255, null=True)),
                ('blob_amount', models.BinaryField(blank=True, null=True)),
                ('document_id', models.BigIntegerField(blank=True, null=True)),
                ('note_id', models.BigIntegerField(blank=True, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 517254))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 517254))),
            ],
            options={
                'db_table': 'measure',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasureType',
            fields=[
                ('measure_type_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('measure_type_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 517254))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 517254))),
            ],
            options={
                'db_table': 'measure_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('note_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('note_uuid', models.UUIDField(blank=True, null=True)),
                ('notetext', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 518292))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 518292))),
            ],
            options={
                'db_table': 'note',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('organization_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('organization_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('full_name', models.CharField(max_length=255)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('address1', models.CharField(blank=True, max_length=255, null=True)),
                ('address2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state_province', models.CharField(blank=True, max_length=3, null=True)),
                ('zip', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('website_url', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 518292))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 518292))),
            ],
            options={
                'db_table': 'organization',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('person_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('person_uuid', models.UUIDField(blank=True, null=True)),
                ('firstname', models.CharField(blank=True, max_length=255, null=True)),
                ('lastname', models.CharField(max_length=255)),
                ('middlename', models.CharField(blank=True, max_length=255, null=True)),
                ('address1', models.CharField(blank=True, max_length=255, null=True)),
                ('address2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('stateprovince', models.CharField(blank=True, max_length=3, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('suffix', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 519270))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 519270))),
            ],
            options={
                'db_table': 'person',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('status_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 504299))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 504299))),
            ],
            options={
                'db_table': 'status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Systemtool',
            fields=[
                ('systemtool_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('systemtool_uuid', models.UUIDField(blank=True, null=True)),
                ('systemtool_name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('vendor', models.CharField(blank=True, max_length=255, null=True)),
                ('model', models.CharField(blank=True, max_length=255, null=True)),
                ('serial', models.CharField(blank=True, max_length=255, null=True)),
                ('ver', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 519270))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 519270))),
            ],
            options={
                'db_table': 'systemtool',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SystemtoolType',
            fields=[
                ('systemtool_type_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('systemtool_type_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 520270))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 520270))),
            ],
            options={
                'db_table': 'systemtool_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('tag_uuid', models.UUIDField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 520270))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 520270))),
            ],
            options={
                'db_table': 'tag',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TagType',
            fields=[
                ('tag_type_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('tag_type_uuid', models.UUIDField(blank=True, null=True)),
                ('short_desscription', models.CharField(blank=True, max_length=32, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 521271))),
                ('mod_date', models.DateTimeField(default=datetime.datetime(2020, 1, 3, 17, 29, 2, 521271))),
            ],
            options={
                'db_table': 'tag_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TriggerTest',
            fields=[
                ('tt_id', models.AutoField(primary_key=True, serialize=False)),
                ('smiles', models.TextField(blank=True, null=True)),
                ('val', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'trigger_test',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('person', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Person')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
