# Generated by Django 3.0.14 on 2021-11-13 02:59

import core.models.core_tables
import core.models.custom_types
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='action_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('start_date', models.DateField(blank=True, db_column='start_date', null=True)),
                ('end_date', models.DateField(blank=True, db_column='end_date', null=True)),
                ('duration', models.FloatField(blank=True, db_column='duration', null=True)),
                ('repeating', models.IntegerField(blank=True, db_column='repeating', null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description', 'action_sequence', 'action_def__internal_slug'])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ActionSequence',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ActionSequenceType',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ActionUnit',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='action_material_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['uuid', 'action__description', 'source_material__internal_slug', 'destination_material__internal_slug'])),
                ('action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='action_unit_action', to='core.Action')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='actor_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['person__internal_slug', 'organization__internal_slug', 'systemtool__internal_slug'])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BaseBomMaterial',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='bom_material_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('alloc_amt_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('used_amt_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('putback_amt_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description', 'bom__internal_slug', 'inventory_material__internal_slug'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='basebommaterial_actor', to='core.Actor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DefaultValues',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('nominal_value', core.models.custom_types.ValField(blank=True, null=True)),
                ('actual_value', core.models.custom_types.ValField(blank=True, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='defaultvalues_actor', to='core.Actor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Edocument',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='edocument_uuid', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, db_column='title', max_length=255, null=True)),
                ('filename', models.CharField(blank=True, db_column='filename', max_length=255, null=True)),
                ('source', models.CharField(blank=True, db_column='source', max_length=255, null=True)),
                ('edoc_type', models.CharField(blank=True, db_column='doc_type_description', max_length=255, null=True)),
                ('edocument', models.BinaryField(blank=True, null=True)),
                ('edoc_ver', models.CharField(blank=True, db_column='doc_ver', max_length=255, null=True)),
                ('ref_edocument_uuid', core.models.core_tables.RetUUIDField()),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['filename', 'edoc_ver'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='edocument_actor', to='core.Actor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperimentActionSequence',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('experiment_action_sequence_seq', models.IntegerField()),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['experiment__internal_slug', 'action_sequence__internal_slug', 'experiment_action_sequence_seq'])),
                ('action_sequence', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiment_action_sequence_as', to='core.ActionSequence')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperimentInstance',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='experiment_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ref_uid', models.CharField(blank=True, db_column='ref_uid', max_length=255, null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
                ('completion_status', models.CharField(db_column='completion_status', default='Pending', max_length=255)),
                ('priority', models.CharField(db_column='priority', default='1', max_length=255)),
                ('action_sequence', models.ManyToManyField(related_name='experiment_instance_as', through='core.ExperimentActionSequence', to='core.ActionSequence')),
                ('lab', models.ForeignKey(blank=True, db_column='lab_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiment_instance_lab', to='core.Actor')),
                ('operator', models.ForeignKey(blank=True, db_column='operator_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiment_instance_operator', to='core.Actor')),
                ('owner', models.ForeignKey(blank=True, db_column='owner_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiment_instance_owner', to='core.Actor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExperimentTemplate',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ref_uid', models.CharField(blank=True, db_column='ref_uid', max_length=255, null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
                ('action_sequence', models.ManyToManyField(related_name='experiment_template_action_sequence', through='core.ExperimentActionSequence', to='core.ActionSequence')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='inventory_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_actor', to='core.Actor')),
                ('lab', models.OneToOneField(blank=True, db_column='lab_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_lab', to='core.Actor')),
                ('operator', models.ForeignKey(blank=True, db_column='operator_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_operator', to='core.Actor')),
                ('owner', models.ForeignKey(blank=True, db_column='owner_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_owner', to='core.Actor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InventoryMaterial',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='inventory_material_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('part_no', models.CharField(blank=True, max_length=255, null=True)),
                ('onhand_amt', core.models.custom_types.ValField(blank=True, null=True)),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['inventory__internal_slug', 'material__internal_slug'])),
                ('phase', models.CharField(blank=True, choices=[('liquid', 'Liquid'), ('solid', 'Solid'), ('gas', 'Gas')], max_length=6, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventorymaterial_actor', to='core.Actor')),
                ('inventory', models.ForeignKey(db_column='inventory_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_material_inventory', to='core.Inventory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='material_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('consumable', models.BooleanField(blank=True, null=True)),
                ('material_class', models.CharField(choices=[('template', 'template'), ('model', 'model'), ('object', 'object')], max_length=64)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='material_actor', to='core.Actor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MaterialIdentifierDef',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='material_refname_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MaterialType',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='material_type_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Measure',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='measure_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('measure_value', core.models.custom_types.ValField()),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_actor', to='core.Actor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='note_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('notetext', models.TextField(blank=True, null=True, verbose_name='Note Text')),
                ('ref_note_uuid', core.models.core_tables.RetUUIDField(blank=True, null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['notetext'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='note_actor', to='core.Actor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('address1', models.CharField(blank=True, max_length=255, null=True)),
                ('address2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state_province', models.CharField(blank=True, max_length=3, null=True)),
                ('zip', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='organization_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=255)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('website_url', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_path', models.CharField(blank=True, max_length=255, null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['full_name', 'short_name'])),
                ('parent', models.ForeignKey(blank=True, db_column='parent_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organization_parent', to='core.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutcomeInstance',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='outcome_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['experiment_instance__internal_slug', 'description'])),
                ('nominal_value', core.models.custom_types.ValField(blank=True, null=True)),
                ('actual_value', core.models.custom_types.ValField(blank=True, null=True)),
                ('file', models.FileField(upload_to='')),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='outcomeinstance_actor', to='core.Actor')),
                ('experiment_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='outcome_instance_experiment_instance', to='core.ExperimentInstance')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PropertyTemplate',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='property_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('property_def_class', models.CharField(choices=[('intrinsic', 'intrinsic'), ('extrinsic', 'extrinsic')], max_length=64)),
                ('short_description', models.CharField(blank=True, db_column='short_description', max_length=255, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='propertytemplate_actor', to='core.Actor')),
                ('default_value', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='property_template_dv', to='core.DefaultValues')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Reagent',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagent_ei', to='core.ExperimentInstance')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReagentMaterial',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagent_material_im', to='core.InventoryMaterial')),
                ('reagent', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagent_material_r', to='core.Reagent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReagentMaterialTemplate',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('material_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagent_material_template_mt', to='core.MaterialType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='status_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SystemtoolType',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='systemtool_type_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='tag_uuid', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('display_text', models.CharField(max_length=255, null=True)),
                ('type', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('type_description', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tag_actor', to='core.Actor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TagType',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='tag_type_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TypeDef',
            fields=[
                ('uuid', core.models.core_tables.RetUUIDField(db_column='type_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255, null=True)),
                ('description', models.CharField(blank=True, db_column='description', max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['category', 'description'])),
            ],
        ),
        migrations.CreateModel(
            name='Udf',
            fields=[
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='udf_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('udf_value', core.models.custom_types.ValField(db_column='udf_val')),
                ('ref_udf', core.models.core_tables.RetUUIDField(db_column='ref_udf_uuid')),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UnitType',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='description', max_length=255, null=True)),
                ('standard_unit', models.CharField(blank=True, db_column='standard_unit', max_length=255, null=True)),
                ('allowed_units', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
            ],
        ),
        migrations.CreateModel(
            name='Vessel',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='vessel_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('total_volume', models.CharField(blank=True, max_length=255, null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='vessel_actor', to='core.Actor')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parent_vessel', to='core.Vessel')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='vessel_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VesselInstance',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='vessel_instance_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='vesselinstance_actor', to='core.Actor')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='vesselinstance_status', to='core.Status')),
                ('vessel_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='vessel_instance_vessel_template', to='core.Vessel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ValueInstance',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('nominal_value', core.models.custom_types.ValField(blank=True, null=True)),
                ('actual_value', core.models.custom_types.ValField(blank=True, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='valueinstance_actor', to='core.Actor')),
                ('outcome_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='value_instance_outcome', to='core.OutcomeInstance')),
                ('value_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='value_instance_value_template', to='core.DefaultValues')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UdfX',
            fields=[
                ('uuid', core.models.core_tables.RetUUIDField(db_column='udf_x_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ref_uuid', core.models.core_tables.RetUUIDField(db_column='ref_udf_uuid')),
                ('udf_uuid', models.ForeignKey(blank=True, db_column='udf_uuid', editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='udf_x_udf_uuid', to='core.Udf')),
            ],
        ),
        migrations.CreateModel(
            name='UdfDef',
            fields=[
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='udf_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('unit', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('val_type', models.ForeignKey(blank=True, db_column='val_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='udf_def_val_type', to='core.TypeDef')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='udf',
            name='udf_def',
            field=models.ForeignKey(blank=True, db_column='udf_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='udf_udf_def', to='core.UdfDef'),
        ),
        migrations.AddField(
            model_name='udf',
            name='udf_val_edocument',
            field=models.ForeignKey(blank=True, db_column='udf_val_edocument_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='udf_udf_val_edocument', to='core.Edocument'),
        ),
        migrations.CreateModel(
            name='TagAssign',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='tag_x_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ref_tag', core.models.core_tables.RetUUIDField(db_column='ref_tag_uuid')),
                ('tag', models.ForeignKey(blank=True, db_column='tag_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tag_assign_tag', to='core.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='tag',
            name='tag_type',
            field=models.ForeignKey(blank=True, db_column='tag_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tag_tag_type', to='core.TagType'),
        ),
        migrations.CreateModel(
            name='Systemtool',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='systemtool_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('systemtool_name', models.CharField(max_length=255, null=True)),
                ('model', models.CharField(blank=True, max_length=255, null=True)),
                ('serial', models.CharField(blank=True, max_length=255, null=True)),
                ('ver', models.CharField(max_length=255, null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['systemtool_name'])),
                ('systemtool_type', models.ForeignKey(db_column='systemtool_type_uuid', on_delete=django.db.models.deletion.CASCADE, related_name='systemtool_systemtool_type', to='core.SystemtoolType')),
                ('vendor_organization', models.ForeignKey(db_column='vendor_organization_uuid', on_delete=django.db.models.deletion.CASCADE, related_name='systemtool_vendor_organization', to='core.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReagentTemplate',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
                ('properties', models.ManyToManyField(blank=True, related_name='reagent_template_p', to='core.PropertyTemplate')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagenttemplate_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReagentMaterialValueTemplate',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('default_value', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagent_material_value_template_dv', to='core.DefaultValues')),
                ('reagent_material_template', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagent_material_value_template_rmt', to='core.ReagentMaterialTemplate')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagentmaterialvaluetemplate_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReagentMaterialValue',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('nominal_value', core.models.custom_types.ValField(blank=True, null=True)),
                ('actual_value', core.models.custom_types.ValField(blank=True, null=True)),
                ('reagent_material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagent_material_value_rmi', to='core.ReagentMaterial')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagentmaterialvalue_status', to='core.Status')),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagent_material_value_rmvt', to='core.ReagentMaterialValueTemplate')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='reagentmaterialtemplate',
            name='reagent_template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagent_material_template_rt', to='core.ReagentTemplate'),
        ),
        migrations.AddField(
            model_name='reagentmaterialtemplate',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagentmaterialtemplate_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='reagentmaterial',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagentmaterial_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='reagentmaterial',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagent_material_rmt', to='core.ReagentMaterialTemplate'),
        ),
        migrations.AddField(
            model_name='reagent',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagent_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='reagent',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reagent_rt', to='core.ReagentTemplate'),
        ),
        migrations.CreateModel(
            name='ReactionParameter',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='reaction_parameter_profile_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, db_column='reaction_parameter_profile_parameter_value', max_length=255, null=True)),
                ('unit', models.CharField(blank=True, db_column='reaction_parameter_profile_parameter_unit', max_length=255, null=True)),
                ('type', models.CharField(blank=True, db_column='reaction_parameter_profile_parameter_type', max_length=255, null=True)),
                ('experiment_uuid', models.CharField(blank=True, db_column='reaction_parameter_profile_experiment_uuid', max_length=255, null=True)),
                ('experiment_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reaction_parameter_profile_workflow', to='core.ExperimentTemplate')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reaction_parameter_profile_organization', to='core.Organization')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reactionparameter_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='propertytemplate',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='propertytemplate_status', to='core.Status'),
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='property_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('nominal_value', core.models.custom_types.ValField(blank=True, null=True)),
                ('value', core.models.custom_types.ValField(blank=True, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='property_actor', to='core.Actor')),
                ('material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='property_m', to='core.Material')),
                ('property_template', models.ForeignKey(blank=True, db_column='property_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='property_pt', to='core.PropertyTemplate')),
                ('reagent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='property_r', to='core.Reagent')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='property_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('address1', models.CharField(blank=True, max_length=255, null=True)),
                ('address2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state_province', models.CharField(blank=True, max_length=3, null=True)),
                ('zip', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='person_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('middle_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('suffix', models.CharField(blank=True, max_length=255, null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['first_name', 'middle_name', 'last_name'])),
                ('added_organization', models.ManyToManyField(related_name='person_added_organization', through='core.Actor', to='core.Organization')),
                ('organization', models.ForeignKey(blank=True, db_column='organization_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_organization', to='core.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParameterDef',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='parameter_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('default_val', core.models.custom_types.ValField(blank=True, db_column='default_val', null=True)),
                ('required', models.BooleanField(blank=True, null=True)),
                ('unit_type', models.CharField(blank=True, db_column='parameter_def_unit_type', max_length=255, null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parameterdef_actor', to='core.Actor')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parameterdef_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='parameter_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('parameter_val_nominal', core.models.custom_types.ValField(blank=True, db_column='parameter_val', null=True)),
                ('parameter_val_actual', core.models.custom_types.ValField(blank=True, db_column='parameter_val_actual', null=True)),
                ('action_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parameter_action_unit', to='core.ActionUnit')),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parameter_actor', to='core.Actor')),
                ('parameter_def', models.ForeignKey(blank=True, db_column='parameter_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parameter_parameter_def', to='core.ParameterDef')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parameter_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutcomeTemplate',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='outcome_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('instance_labels', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255, null=True), blank=True, null=True, size=None)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['experiment__internal_slug', 'description'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='outcometemplate_actor', to='core.Actor')),
                ('default_value', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='outcome_template_default_value', to='core.DefaultValues')),
                ('experiment', models.ForeignKey(blank=True, db_column='experiment_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='outcome_template_experiment_template', to='core.ExperimentTemplate')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='outcometemplate_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='outcomeinstance',
            name='outcome_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='outcome_instance_ot', to='core.OutcomeTemplate'),
        ),
        migrations.AddField(
            model_name='outcomeinstance',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='outcomeinstance_status', to='core.Status'),
        ),
        migrations.CreateModel(
            name='OrganizationPassword',
            fields=[
                ('uuid', models.AutoField(primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=255)),
                ('organization', models.OneToOneField(db_column='parent_uuid', on_delete=django.db.models.deletion.CASCADE, related_name='organization_password_organization', to='core.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='NoteX',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='note_x_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ref_note', core.models.core_tables.RetUUIDField(db_column='ref_note_uuid')),
                ('note', models.ForeignKey(blank=True, db_column='note_uuid', editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='note_x_note', to='core.Note')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Mixture',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='material_composite_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('addressable', models.BooleanField(blank=True, null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['composite__internal_slug', 'component__internal_slug'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='mixture_actor', to='core.Actor')),
                ('component', models.ForeignKey(blank=True, db_column='component_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='composite_material_component', to='core.Material')),
                ('composite', models.ForeignKey(blank=True, db_column='composite_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='composite_material_composite', to='core.Material')),
                ('material_type', models.ManyToManyField(blank=True, related_name='composite_material_material_type', to='core.MaterialType')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='mixture_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeasureX',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='measure_x_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ref_measure', core.models.core_tables.RetUUIDField(db_column='ref_measure_uuid')),
                ('measure', models.ForeignKey(blank=True, db_column='measure_uuid', editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_x_measure', to='core.Measure')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeasureType',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='measure_type_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measuretype_actor', to='core.Actor')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measuretype_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeasureDef',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='measure_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('default_measure_value', core.models.custom_types.ValField()),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measuredef_actor', to='core.Actor')),
                ('default_measure_type', models.ForeignKey(blank=True, db_column='default_measure_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_def_default_measure_type', to='core.MeasureType')),
                ('property_def', models.ForeignKey(blank=True, db_column='property_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_def_default_measure_type', to='core.PropertyTemplate')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measuredef_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='measure',
            name='measure_def',
            field=models.ForeignKey(db_column='measure_def_uuid', on_delete=django.db.models.deletion.DO_NOTHING, to='core.MeasureDef'),
        ),
        migrations.AddField(
            model_name='measure',
            name='measure_type',
            field=models.ForeignKey(blank=True, db_column='measure_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_measure_type', to='core.MeasureType'),
        ),
        migrations.AddField(
            model_name='measure',
            name='ref_measure',
            field=models.ForeignKey(blank=True, db_column='ref_measure_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_ref_measure', to='core.Measure'),
        ),
        migrations.AddField(
            model_name='measure',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_status', to='core.Status'),
        ),
        migrations.CreateModel(
            name='MaterialIdentifier',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='material_refname_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['material_identifier_def__internal_slug', 'description'])),
                ('full_description', models.CharField(blank=True, max_length=1024, null=True)),
                ('material_identifier_def', models.ForeignKey(blank=True, db_column='material_refname_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='material_identifier_material_identifier_def', to='core.MaterialIdentifierDef')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='materialidentifier_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='material',
            name='identifier',
            field=models.ManyToManyField(blank=True, related_name='material_material_identifier', to='core.MaterialIdentifier'),
        ),
        migrations.AddField(
            model_name='material',
            name='material_type',
            field=models.ManyToManyField(blank=True, related_name='material_material_type', to='core.MaterialType'),
        ),
        migrations.AddField(
            model_name='material',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='material_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='inventorymaterial',
            name='material',
            field=models.ForeignKey(blank=True, db_column='material_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_material_material', to='core.Material'),
        ),
        migrations.AddField(
            model_name='inventorymaterial',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventorymaterial_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='inventory',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_status', to='core.Status'),
        ),
        migrations.CreateModel(
            name='ExperimentType',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='experiment_type_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experimenttype_actor', to='core.Actor')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experimenttype_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='experimenttemplate',
            name='experiment_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiment_template_experiment_type', to='core.ExperimentType'),
        ),
        migrations.AddField(
            model_name='experimenttemplate',
            name='lab',
            field=models.ForeignKey(blank=True, db_column='lab_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiment_template_lab', to='core.Actor'),
        ),
        migrations.AddField(
            model_name='experimenttemplate',
            name='operator',
            field=models.ForeignKey(blank=True, db_column='operator_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiment_template_operator', to='core.Actor'),
        ),
        migrations.AddField(
            model_name='experimenttemplate',
            name='outcome_templates',
            field=models.ManyToManyField(blank=True, related_name='experiment_template_outcome_template', to='core.OutcomeTemplate'),
        ),
        migrations.AddField(
            model_name='experimenttemplate',
            name='owner',
            field=models.ForeignKey(blank=True, db_column='owner_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiment_template_owner', to='core.Actor'),
        ),
        migrations.AddField(
            model_name='experimenttemplate',
            name='reagent_templates',
            field=models.ManyToManyField(blank=True, related_name='experiment_template_reagent_template', to='core.ReagentTemplate'),
        ),
        migrations.AddField(
            model_name='experimenttemplate',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experimenttemplate_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='experimentinstance',
            name='parent',
            field=models.ForeignKey(blank=True, db_column='parent_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiment_instance_parent', to='core.ExperimentTemplate'),
        ),
        migrations.AddField(
            model_name='experimentinstance',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experimentinstance_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='experimentactionsequence',
            name='experiment_instance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiment_instance_eas', to='core.ExperimentInstance'),
        ),
        migrations.AddField(
            model_name='experimentactionsequence',
            name='experiment_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiment_action_sequence_et', to='core.ExperimentTemplate'),
        ),
        migrations.CreateModel(
            name='EdocumentX',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='edocument_x_uuid', editable=False, primary_key=True, serialize=False)),
                ('ref_edocument_uuid', core.models.core_tables.RetUUIDField()),
                ('edocument', models.ForeignKey(blank=True, db_column='edocument_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='edocument_x_edocument', to='core.Edocument')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='edocument',
            name='edoc_type_uuid',
            field=models.ForeignKey(blank=True, db_column='doc_type_uuid', editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.TypeDef'),
        ),
        migrations.AddField(
            model_name='edocument',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='edocument_status', to='core.Status'),
        ),
        migrations.CreateModel(
            name='Contents',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='contents_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('value', core.models.custom_types.ValField(blank=True, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='contents_actor', to='core.Actor')),
                ('base_bom_material', models.ForeignKey(blank=True, db_column='bom_material_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='contents_bom_material_uuid', to='core.BaseBomMaterial')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='contents_status', to='core.Status')),
                ('vessel_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='contents_vessel_instance', to='core.VesselInstance')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CalculationDef',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='calculation_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('calc_definition', models.CharField(blank=True, max_length=255, null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description', 'short_name', 'calc_definition'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculationdef_actor', to='core.Actor')),
                ('in_opt_source', models.ForeignKey(blank=True, db_column='in_opt_source_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_def_in_opt_source', to='core.CalculationDef')),
                ('in_opt_type', models.ForeignKey(blank=True, db_column='in_opt_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_def_in_opt_type', to='core.TypeDef')),
                ('in_source', models.ForeignKey(blank=True, db_column='in_source_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_def_in_source', to='core.CalculationDef')),
                ('in_type', models.ForeignKey(blank=True, db_column='in_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_def_in_type', to='core.TypeDef')),
                ('out_type', models.ForeignKey(blank=True, db_column='out_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_def_out_type', to='core.TypeDef')),
                ('parameter_def', models.ManyToManyField(related_name='calculation_def_parameter_def', to='core.ParameterDef')),
                ('systemtool', models.ForeignKey(blank=True, db_column='systemtool_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_def_systemtool', to='core.Systemtool')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Calculation',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='calculation_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('in_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('in_opt_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('out_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('calculation_alias_name', models.CharField(blank=True, max_length=255, null=True)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('calc_definition', models.CharField(blank=True, max_length=255, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_actor', to='core.Actor')),
                ('calculation_def', models.ForeignKey(blank=True, db_column='calculation_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_calculation_def', to='core.CalculationDef')),
                ('in_opt_val_edocument', models.ForeignKey(blank=True, db_column='in_opt_val_edocument_uuid', editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_in_opt_val_edocument', to='core.Edocument')),
                ('in_val_edocument', models.ForeignKey(blank=True, db_column='in_val_edocument_uuid', editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_in_val_edocument', to='core.Edocument')),
                ('out_val_edocument', models.ForeignKey(blank=True, db_column='out_val_edocument_uuid', editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_out_val_edocument', to='core.Edocument')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_status', to='core.Status')),
                ('systemtool', models.ForeignKey(db_column='systemtool_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_systemtool', to='core.Systemtool')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BillOfMaterials',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='bom_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description', 'experiment__internal_slug'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='billofmaterials_actor', to='core.Actor')),
                ('experiment', models.ForeignKey(blank=True, db_column='experiment_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bom_experiment', to='core.ExperimentTemplate')),
                ('experiment_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bom_experiment_instance', to='core.ExperimentInstance')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='billofmaterials_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='basebommaterial',
            name='bom',
            field=models.ForeignKey(blank=True, db_column='bom_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bom_material_bom', to='core.BillOfMaterials'),
        ),
        migrations.AddField(
            model_name='basebommaterial',
            name='inventory_material',
            field=models.ForeignKey(blank=True, db_column='inventory_material_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bom_material_inventory_material', to='core.InventoryMaterial'),
        ),
        migrations.AddField(
            model_name='basebommaterial',
            name='mixture',
            field=models.ForeignKey(blank=True, db_column='material_composite_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bom_composite_material_composite_material', to='core.Mixture'),
        ),
        migrations.AddField(
            model_name='basebommaterial',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='basebommaterial_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='basebommaterial',
            name='vessel',
            field=models.ForeignKey(blank=True, db_column='vessel_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bom_material_vessel', to='core.Vessel'),
        ),
        migrations.CreateModel(
            name='ActorPref',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='actor_pref_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('pkey', models.CharField(blank=True, max_length=255, null=True)),
                ('pvalue', models.CharField(blank=True, max_length=255, null=True)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['pkey', 'pvalue'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actorpref_actor', to='core.Actor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='actor',
            name='organization',
            field=models.ForeignKey(blank=True, db_column='organization_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='actor_organization', to='core.Organization'),
        ),
        migrations.AddField(
            model_name='actor',
            name='person',
            field=models.ForeignKey(blank=True, db_column='person_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='actor_person', to='core.Person'),
        ),
        migrations.AddField(
            model_name='actor',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actor_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='actor',
            name='systemtool',
            field=models.ForeignKey(blank=True, db_column='systemtool_uuid', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='actor_systemtool', to='core.Systemtool'),
        ),
        migrations.AddField(
            model_name='actionunit',
            name='actor',
            field=models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actionunit_actor', to='core.Actor'),
        ),
        migrations.AddField(
            model_name='actionunit',
            name='destination_material',
            field=models.ForeignKey(blank=True, db_column='destination_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='action_unit_destination_material', to='core.BaseBomMaterial'),
        ),
        migrations.AddField(
            model_name='actionunit',
            name='source_material',
            field=models.ForeignKey(blank=True, db_column='source_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='action_unit_source_material', to='core.BaseBomMaterial'),
        ),
        migrations.AddField(
            model_name='actionunit',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actionunit_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='actionsequence',
            name='action_sequence_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='action_sequence_action_sequence_type', to='core.ActionSequenceType'),
        ),
        migrations.AddField(
            model_name='actionsequence',
            name='actor',
            field=models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actionsequence_actor', to='core.Actor'),
        ),
        migrations.AddField(
            model_name='actionsequence',
            name='experiment',
            field=models.ManyToManyField(related_name='action_sequence_experiment', through='core.ExperimentActionSequence', to='core.ExperimentTemplate'),
        ),
        migrations.AddField(
            model_name='actionsequence',
            name='parent',
            field=models.ForeignKey(blank=True, db_column='parent_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='action_sequence_parent', to='core.ActionSequence'),
        ),
        migrations.AddField(
            model_name='actionsequence',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actionsequence_status', to='core.Status'),
        ),
        migrations.CreateModel(
            name='ActionDef',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='action_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('internal_slug', core.models.core_tables.SlugField(blank=True, editable=False, max_length=255, overwrite=True, populate_from=['description'])),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actiondef_actor', to='core.Actor')),
                ('parameter_def', models.ManyToManyField(blank=True, to='core.ParameterDef')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actiondef_status', to='core.Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='action',
            name='action_def',
            field=models.ForeignKey(blank=True, db_column='action_def_uuid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='action_action_def', to='core.ActionDef'),
        ),
        migrations.AddField(
            model_name='action',
            name='action_sequence',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='action_action_sequence', to='core.ActionSequence'),
        ),
        migrations.AddField(
            model_name='action',
            name='actor',
            field=models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='action_actor', to='core.Actor'),
        ),
        migrations.AddField(
            model_name='action',
            name='parameter_def',
            field=models.ManyToManyField(blank=True, editable=False, to='core.ParameterDef'),
        ),
        migrations.AddField(
            model_name='action',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='action_status', to='core.Status'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('person', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Person')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BomCompositeMaterial',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.basebommaterial',),
        ),
        migrations.CreateModel(
            name='BomMaterial',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.basebommaterial',),
        ),
        migrations.CreateModel(
            name='BomVessel',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.basebommaterial',),
        ),
        migrations.CreateModel(
            name='OutcomeInstanceValue',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.valueinstance',),
        ),
        migrations.AddField(
            model_name='basebommaterial',
            name='bom_material',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bom_composite_material_bom_material', to='core.BomMaterial'),
        ),
    ]
