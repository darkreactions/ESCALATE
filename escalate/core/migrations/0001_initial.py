# Generated by Django 3.0.8 on 2021-06-10 20:27

import core.models.core_tables
import core.models.custom_types
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='action_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='description', max_length=255, null=True)),
                ('start_date', models.DateField(blank=True, db_column='start_date', null=True)),
                ('end_date', models.DateField(blank=True, db_column='end_date', null=True)),
                ('duration', models.FloatField(blank=True, db_column='duration', null=True)),
                ('repeating', models.IntegerField(blank=True, db_column='repeating', null=True)),
            ],
            options={
                'db_table': 'action',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ActionDef',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='action_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='description', max_length=255, null=True)),
            ],
            options={
                'db_table': 'action_def',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='actor_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'actor',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Calculation',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='calculation_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('in_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('in_opt_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('out_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('calculation_alias_name', models.CharField(blank=True, max_length=255, null=True)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('calc_definition', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=1023, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_actor', to='core.Actor')),
            ],
            options={
                'db_table': 'calculation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='condition_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('condition_description', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('in_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('out_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='condition_actor', to='core.Actor')),
            ],
            options={
                'db_table': 'condition',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Edocument',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='edocument_uuid', editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, db_column='title', max_length=255, null=True)),
                ('description', models.CharField(blank=True, db_column='description', max_length=255, null=True)),
                ('filename', models.CharField(blank=True, db_column='filename', max_length=255, null=True)),
                ('source', models.CharField(blank=True, db_column='source', max_length=255, null=True)),
                ('edoc_type', models.CharField(blank=True, db_column='doc_type_description', max_length=255, null=True)),
                ('edocument', models.BinaryField(blank=True, null=True)),
                ('edoc_ver', models.CharField(blank=True, db_column='doc_ver', max_length=255, null=True)),
                ('ref_edocument_uuid', core.models.core_tables.RetUUIDField()),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='edocument_actor', to='core.Actor')),
            ],
            options={
                'db_table': 'edocument',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='experiment_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ref_uid', models.CharField(db_column='ref_uid', max_length=255)),
                ('description', models.CharField(db_column='description', max_length=255)),
            ],
            options={
                'db_table': 'experiment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ExperimentWorkflow',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='experiment_workflow_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('experiment_workflow_seq', models.IntegerField()),
                ('experiment', models.ForeignKey(blank=True, db_column='experiment_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experiment_workflow_experiment', to='core.Experiment')),
            ],
            options={
                'db_table': 'experiment_workflow',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='inventory_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_actor', to='core.Actor')),
                ('lab', models.OneToOneField(blank=True, db_column='lab_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_lab', to='core.Actor')),
                ('operator', models.ForeignKey(blank=True, db_column='operator_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_operator', to='core.Actor')),
                ('owner', models.ForeignKey(blank=True, db_column='owner_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_owner', to='core.Actor')),
            ],
            options={
                'db_table': 'inventory',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MaterialIdentifierDef',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='material_refname_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'material_refname_def',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MaterialType',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='material_type_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'material_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Measure',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='measure_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('measure_value', core.models.custom_types.ValField()),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_actor', to='core.Actor')),
            ],
            options={
                'db_table': 'measure',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='note_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('notetext', models.TextField(blank=True, null=True, verbose_name='Note Text')),
                ('ref_note_uuid', core.models.core_tables.RetUUIDField(blank=True, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='note_actor', to='core.Actor')),
            ],
            options={
                'db_table': 'note',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='organization_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255)),
                ('full_name', models.CharField(max_length=255)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('address1', models.CharField(blank=True, max_length=255, null=True)),
                ('address2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state_province', models.CharField(blank=True, max_length=3, null=True)),
                ('zip', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('website_url', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_path', models.CharField(blank=True, max_length=255, null=True)),
                ('parent', models.ForeignKey(blank=True, db_column='parent_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='organization_parent', to='core.Organization')),
            ],
            options={
                'db_table': 'organization',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ParameterDef',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='parameter_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='description', max_length=255, null=True)),
                ('default_val', core.models.custom_types.ValField(db_column='default_val')),
                ('required', models.BooleanField()),
                ('unit_type', models.CharField(blank=True, db_column='parameter_def_unit_type', max_length=255, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parameterdef_actor', to='core.Actor')),
            ],
            options={
                'db_table': 'parameter_def',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='status_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255, null=True)),
            ],
            options={
                'db_table': 'status',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SystemtoolType',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='systemtool_type_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'systemtool_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='tag_uuid', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('display_text', models.CharField(max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('type', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('type_description', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tag_actor', to='core.Actor')),
            ],
            options={
                'db_table': 'tag',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TagType',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='tag_type_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'tag_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TypeDef',
            fields=[
                ('uuid', core.models.core_tables.RetUUIDField(db_column='type_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('category', models.CharField(blank=True, db_column='category', max_length=255, null=True)),
                ('description', models.CharField(blank=True, db_column='description', max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'type_def',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Udf',
            fields=[
                ('uuid', core.models.core_tables.RetUUIDField(db_column='udf_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255, null=True)),
                ('udf_value', core.models.custom_types.ValField(db_column='udf_val')),
                ('ref_udf', core.models.core_tables.RetUUIDField(db_column='ref_udf_uuid')),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'udf',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UnitType',
            fields=[
                ('uuid', models.UUIDField(primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='description', max_length=255, null=True)),
                ('standard_unit', models.CharField(blank=True, db_column='standard_unit', max_length=255, null=True)),
                ('allowed_units', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
            ],
        ),
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='workflow_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='description', max_length=255, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_actor', to='core.Actor')),
                ('experiment', models.ManyToManyField(related_name='workflow_experiment', through='core.ExperimentWorkflow', to='core.Experiment')),
                ('parent', models.ForeignKey(blank=True, db_column='parent_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_parent', to='core.Workflow')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_status', to='core.Status')),
            ],
            options={
                'db_table': 'workflow',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WorkflowActionSet',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='workflow_action_set_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('duration', models.FloatField()),
                ('repeating', models.BigIntegerField()),
                ('parameter_val_nominal', core.models.custom_types.CustomArrayField(base_field=core.models.custom_types.ValField(), blank=True, db_column='parameter_val', null=True, size=None)),
                ('parameter_val_actual', core.models.custom_types.CustomArrayField(base_field=core.models.custom_types.ValField(), blank=True, db_column='parameter_val_actual', null=True, size=None)),
                ('source_material', django.contrib.postgres.fields.ArrayField(base_field=core.models.core_tables.RetUUIDField(blank=True, null=True), db_column='source_material_uuid', size=None)),
                ('destination_material', django.contrib.postgres.fields.ArrayField(base_field=core.models.core_tables.RetUUIDField(blank=True, null=True), db_column='destination_material_uuid', size=None)),
                ('action_def', models.ForeignKey(blank=True, db_column='action_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_action_set_action_def', to='core.ActionDef')),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflowactionset_actor', to='core.Actor')),
                ('calculation', models.ForeignKey(blank=True, db_column='calculation_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_action_set_calculation', to='core.Calculation')),
                ('parameter_def', models.ForeignKey(blank=True, db_column='parameter_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_action_set_parameter_def', to='core.ParameterDef')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflowactionset_status', to='core.Status')),
                ('workflow', models.ForeignKey(blank=True, db_column='workflow_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_action_set_workflow', to='core.Workflow')),
            ],
            options={
                'db_table': 'workflow_action_set',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WorkflowObject',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='workflow_object_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('action', models.ForeignKey(blank=True, db_column='action_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_object_action', to='core.Action')),
                ('condition', models.ForeignKey(blank=True, db_column='condition_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_object_condition', to='core.Condition')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflowobject_status', to='core.Status')),
                ('workflow', models.ForeignKey(blank=True, db_column='workflow_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_object_workflow', to='core.Workflow')),
                ('workflow_action_set', models.ForeignKey(blank=True, db_column='workflow_action_set_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_object_workflow_action_set', to='core.WorkflowActionSet')),
            ],
            options={
                'db_table': 'workflow_object',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WorkflowType',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='workflow_type_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='description', max_length=255, null=True)),
            ],
            options={
                'db_table': 'workflow_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WorkflowStep',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='workflow_step_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('parent_path', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('parent', models.ForeignKey(blank=True, db_column='parent_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_step_parent', to='core.WorkflowStep')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflowstep_status', to='core.Status')),
                ('workflow', models.ForeignKey(db_column='workflow_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_step_workflow', to='core.Workflow')),
                ('workflow_action_set', models.ForeignKey(db_column='workflow_action_set_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_step_workflow_action_set', to='core.WorkflowActionSet')),
                ('workflow_object', models.ForeignKey(db_column='workflow_object_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_step_workflow_object', to='core.WorkflowObject')),
            ],
            options={
                'db_table': 'workflow_step',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='workflow',
            name='workflow_type',
            field=models.ForeignKey(blank=True, db_column='workflow_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='workflow_workflow_type', to='core.WorkflowType'),
        ),
        migrations.CreateModel(
            name='UdfX',
            fields=[
                ('uuid', core.models.core_tables.RetUUIDField(db_column='udf_x_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ref_uuid', core.models.core_tables.RetUUIDField(db_column='ref_udf_uuid')),
                ('udf_uuid', models.ForeignKey(blank=True, db_column='udf_uuid', editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='udf_x_udf_uuid', to='core.Udf')),
            ],
            options={
                'db_table': 'udf_x',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UdfDef',
            fields=[
                ('uuid', core.models.core_tables.RetUUIDField(db_column='udf_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=255, null=True)),
                ('unit', models.CharField(blank=True, max_length=255, null=True)),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('val_type', models.ForeignKey(blank=True, db_column='val_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='udf_def_val_type', to='core.TypeDef')),
            ],
            options={
                'db_table': 'udf_def',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='udf',
            name='udf_def',
            field=models.ForeignKey(blank=True, db_column='udf_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='udf_udf_def', to='core.UdfDef'),
        ),
        migrations.AddField(
            model_name='udf',
            name='udf_val_edocument',
            field=models.ForeignKey(blank=True, db_column='udf_val_edocument_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='udf_udf_val_edocument', to='core.Edocument'),
        ),
        migrations.CreateModel(
            name='TagAssign',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='tag_x_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ref_tag', core.models.core_tables.RetUUIDField(db_column='ref_tag_uuid')),
                ('tag', models.ForeignKey(blank=True, db_column='tag_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tag_assign_tag', to='core.Tag')),
            ],
            options={
                'db_table': 'tag_assign',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='tag',
            name='tag_type',
            field=models.ForeignKey(blank=True, db_column='tag_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='tag_tag_type', to='core.TagType'),
        ),
        migrations.CreateModel(
            name='Systemtool',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='systemtool_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('systemtool_name', models.CharField(max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('model', models.CharField(blank=True, max_length=255, null=True)),
                ('serial', models.CharField(blank=True, max_length=255, null=True)),
                ('ver', models.CharField(max_length=255, null=True)),
                ('systemtool_type', models.ForeignKey(db_column='systemtool_type_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='systemtool_systemtool_type', to='core.SystemtoolType')),
                ('vendor_organization', models.ForeignKey(db_column='vendor_organization_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='systemtool_vendor_organization', to='core.Organization')),
            ],
            options={
                'db_table': 'systemtool',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PropertyDef',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='property_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='description', max_length=255, null=True)),
                ('property_def_class', models.CharField(choices=[('intrinsic', 'intrinsic'), ('extrinsic', 'extrinsic')], max_length=64)),
                ('short_description', models.CharField(blank=True, db_column='short_description', max_length=255, null=True)),
                ('val_unit', models.CharField(blank=True, db_column='valunit', max_length=255, null=True)),
                ('unit_type', models.CharField(blank=True, db_column='property_def_unit_type', max_length=255, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='propertydef_actor', to='core.Actor')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='propertydef_status', to='core.Status')),
                ('val_type', models.ForeignKey(blank=True, db_column='val_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='property_def_val_type', to='core.TypeDef')),
            ],
            options={
                'db_table': 'property_def',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='property_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('property_val', core.models.custom_types.ValField(blank=True, db_column='property_val', null=True)),
                ('property_class', models.CharField(choices=[('nominal', 'nominal'), ('actual', 'actual')], max_length=64)),
                ('property_ref', core.models.core_tables.RetUUIDField(blank=True, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='property_actor', to='core.Actor')),
                ('property_def', models.ForeignKey(blank=True, db_column='property_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='property_property_def', to='core.PropertyDef')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='property_status', to='core.Status')),
            ],
            options={
                'db_table': 'property',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='person_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('middle_name', models.CharField(blank=True, max_length=255, null=True)),
                ('address1', models.CharField(blank=True, max_length=255, null=True)),
                ('address2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('state_province', models.CharField(blank=True, max_length=3, null=True)),
                ('zip', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('suffix', models.CharField(blank=True, max_length=255, null=True)),
                ('added_organization', models.ManyToManyField(related_name='person_added_organization', through='core.Actor', to='core.Organization')),
                ('organization', models.ForeignKey(blank=True, db_column='organization_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='person_organization', to='core.Organization')),
            ],
            options={
                'db_table': 'person',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='parameterdef',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parameterdef_status', to='core.Status'),
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='parameter_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('parameter_val_nominal', core.models.custom_types.ValField(blank=True, db_column='parameter_val', null=True)),
                ('parameter_val_actual', core.models.custom_types.ValField(blank=True, db_column='parameter_val_actual', null=True)),
                ('ref_object', core.models.core_tables.RetUUIDField(blank=True, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parameter_actor', to='core.Actor')),
                ('parameter_def', models.ForeignKey(blank=True, db_column='parameter_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parameter_parameter_def', to='core.ParameterDef')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='parameter_status', to='core.Status')),
            ],
            options={
                'db_table': 'parameter',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Outcome',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='outcome_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(db_column='description', max_length=255)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='outcome_actor', to='core.Actor')),
                ('experiment', models.ForeignKey(blank=True, db_column='experiment_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='outcome_experiment', to='core.Experiment')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='outcome_status', to='core.Status')),
            ],
            options={
                'db_table': 'outcome',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OrganizationPassword',
            fields=[
                ('uuid', models.AutoField(primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=255)),
                ('organization', models.OneToOneField(db_column='parent_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='organization_password_organization', to='core.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='NoteX',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='note_x_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ref_note', core.models.core_tables.RetUUIDField(db_column='ref_note_uuid')),
                ('note', models.ForeignKey(blank=True, db_column='note_uuid', editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='note_x_note', to='core.Note')),
            ],
            options={
                'db_table': 'note_x',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasureX',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='measure_x_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ref_measure', core.models.core_tables.RetUUIDField(db_column='ref_measure_uuid')),
                ('measure', models.ForeignKey(blank=True, db_column='measure_uuid', editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_x_measure', to='core.Measure')),
            ],
            options={
                'db_table': 'measure_x',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasureType',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='measure_type_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, editable=False, max_length=255, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measuretype_actor', to='core.Actor')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measuretype_status', to='core.Status')),
            ],
            options={
                'db_table': 'measure_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasureDef',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='measure_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='description', max_length=255, null=True)),
                ('default_measure_value', core.models.custom_types.ValField()),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measuredef_actor', to='core.Actor')),
                ('default_measure_type', models.ForeignKey(blank=True, db_column='default_measure_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_def_default_measure_type', to='core.MeasureType')),
                ('property_def', models.ForeignKey(blank=True, db_column='property_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_def_default_measure_type', to='core.PropertyDef')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measuredef_status', to='core.Status')),
            ],
            options={
                'db_table': 'measure_def',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='measure',
            name='measure_def',
            field=models.ForeignKey(db_column='measure_def_uuid', on_delete=django.db.models.deletion.DO_NOTHING, to='core.MeasureDef'),
        ),
        migrations.AddField(
            model_name='measure',
            name='measure_type',
            field=models.ForeignKey(blank=True, db_column='measure_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_measure_type', to='core.MeasureType'),
        ),
        migrations.AddField(
            model_name='measure',
            name='ref_measure',
            field=models.ForeignKey(blank=True, db_column='ref_measure_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_ref_measure', to='core.Measure'),
        ),
        migrations.AddField(
            model_name='measure',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='measure_status', to='core.Status'),
        ),
        migrations.CreateModel(
            name='MaterialIdentifier',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='material_refname_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('material_identifier_def', models.ForeignKey(blank=True, db_column='material_refname_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='material_identifier_material_identifier_def', to='core.MaterialIdentifierDef')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='materialidentifier_status', to='core.Status')),
            ],
            options={
                'db_table': 'material_refname',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='material_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('consumable', models.BooleanField(blank=True, null=True)),
                ('material_class', models.CharField(choices=[('template', 'template'), ('model', 'model'), ('object', 'object')], max_length=64)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='material_actor', to='core.Actor')),
                ('identifier', models.ManyToManyField(blank=True, related_name='material_material_identifier', to='core.MaterialIdentifier')),
                ('material_type', models.ManyToManyField(blank=True, related_name='material_material_type', to='core.MaterialType')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='material_status', to='core.Status')),
            ],
            options={
                'db_table': 'material',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='InventoryMaterial',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='inventory_material_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('part_no', models.CharField(blank=True, max_length=255, null=True)),
                ('onhand_amt', core.models.custom_types.ValField(blank=True, null=True)),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventorymaterial_actor', to='core.Actor')),
                ('inventory', models.ForeignKey(db_column='inventory_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_material_inventory', to='core.Inventory')),
                ('material', models.ForeignKey(blank=True, db_column='material_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_material_material', to='core.Material')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventorymaterial_status', to='core.Status')),
            ],
            options={
                'db_table': 'inventory_material',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='inventory',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='inventory_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='experimentworkflow',
            name='workflow',
            field=models.ForeignKey(blank=True, db_column='workflow_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experiment_workflow_workflow', to='core.Workflow'),
        ),
        migrations.CreateModel(
            name='ExperimentType',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='experiment_type_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(db_column='description', max_length=255)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experimenttype_actor', to='core.Actor')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experimenttype_status', to='core.Status')),
            ],
            options={
                'db_table': 'experiment_type',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='experiment',
            name='experiment_type',
            field=models.ForeignKey(blank=True, db_column='experiment_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experiment_experiment_type', to='core.ExperimentType'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='lab',
            field=models.ForeignKey(blank=True, db_column='lab_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experiment_lab', to='core.Actor'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='operator',
            field=models.ForeignKey(blank=True, db_column='operator_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experiment_operator', to='core.Actor'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='owner',
            field=models.ForeignKey(blank=True, db_column='owner_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experiment_owner', to='core.Actor'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='parent',
            field=models.ForeignKey(blank=True, db_column='parent_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experiment_parent', to='core.TypeDef'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='experiment_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='workflow',
            field=models.ManyToManyField(related_name='experiment_workflow', through='core.ExperimentWorkflow', to='core.Workflow'),
        ),
        migrations.CreateModel(
            name='EdocumentX',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='edocument_x_uuid', editable=False, primary_key=True, serialize=False)),
                ('ref_edocument_uuid', core.models.core_tables.RetUUIDField()),
                ('edocument', models.ForeignKey(blank=True, db_column='edocument_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='edocument_x_edocument', to='core.Edocument')),
            ],
            options={
                'db_table': 'edocument_x',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='edocument',
            name='edoc_type_uuid',
            field=models.ForeignKey(blank=True, db_column='doc_type_uuid', editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.TypeDef'),
        ),
        migrations.AddField(
            model_name='edocument',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='edocument_status', to='core.Status'),
        ),
        migrations.CreateModel(
            name='ConditionPath',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='condition_path_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('condition_out_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('condition', models.ForeignKey(blank=True, db_column='condition_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='condition_path_condition', to='core.Condition')),
                ('workflow_step', models.ForeignKey(blank=True, db_column='workflow_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='condition_path_workflow_step', to='core.WorkflowStep')),
            ],
            options={
                'db_table': 'condition_path',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ConditionDef',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='condition_def_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, db_column='description', editable=False, max_length=255, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='conditiondef_actor', to='core.Actor')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='conditiondef_status', to='core.Status')),
            ],
            options={
                'db_table': 'condition_def',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='condition',
            name='condition_def',
            field=models.ForeignKey(db_column='condition_def_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='condition_condition_def', to='core.ConditionDef'),
        ),
        migrations.AddField(
            model_name='condition',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='condition_status', to='core.Status'),
        ),
        migrations.CreateModel(
            name='CompositeMaterial',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='material_composite_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('addressable', models.BooleanField(blank=True, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='compositematerial_actor', to='core.Actor')),
                ('component', models.ForeignKey(blank=True, db_column='component_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='composite_material_component', to='core.Material')),
                ('composite', models.ForeignKey(blank=True, db_column='composite_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='composite_material_composite', to='core.Material')),
                ('material_type', models.ManyToManyField(blank=True, related_name='composite_material_material_type', to='core.MaterialType')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='compositematerial_status', to='core.Status')),
            ],
            options={
                'db_table': 'material_composite',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CalculationDef',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='calculation_def_uuid', primary_key=True, serialize=False)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('calc_definition', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=1023, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculationdef_actor', to='core.Actor')),
                ('in_opt_source', models.ForeignKey(db_column='in_opt_source_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_def_in_opt_source', to='core.CalculationDef')),
                ('in_opt_type', models.ForeignKey(db_column='in_opt_type_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_def_in_opt_type', to='core.TypeDef')),
                ('in_source', models.ForeignKey(db_column='in_source_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_def_in_source', to='core.CalculationDef')),
                ('in_type', models.ForeignKey(db_column='in_type_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_def_in_type', to='core.TypeDef')),
                ('out_type', models.ForeignKey(blank=True, db_column='out_type_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_def_out_type', to='core.TypeDef')),
                ('parameter_def', models.ManyToManyField(related_name='calculation_def_parameter_def', to='core.ParameterDef')),
                ('systemtool', models.ForeignKey(db_column='systemtool_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_def_systemtool', to='core.Systemtool')),
            ],
            options={
                'db_table': 'calculation_def',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='calculation',
            name='calculation_def',
            field=models.ForeignKey(blank=True, db_column='calculation_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_calculation_def', to='core.CalculationDef'),
        ),
        migrations.AddField(
            model_name='calculation',
            name='in_opt_val_edocument',
            field=models.ForeignKey(db_column='in_opt_val_edocument_uuid', editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_in_opt_val_edocument', to='core.Edocument'),
        ),
        migrations.AddField(
            model_name='calculation',
            name='in_val_edocument',
            field=models.ForeignKey(db_column='in_val_edocument_uuid', editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_in_val_edocument', to='core.Edocument'),
        ),
        migrations.AddField(
            model_name='calculation',
            name='out_val_edocument',
            field=models.ForeignKey(db_column='out_val_edocument_uuid', editable=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_out_val_edocument', to='core.Edocument'),
        ),
        migrations.AddField(
            model_name='calculation',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='calculation',
            name='systemtool',
            field=models.ForeignKey(db_column='systemtool_uuid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='calculation_systemtool', to='core.Systemtool'),
        ),
        migrations.CreateModel(
            name='BillOfMaterials',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='bom_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='billofmaterials_actor', to='core.Actor')),
                ('experiment', models.ForeignKey(blank=True, db_column='experiment_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='bom_experiment', to='core.Experiment')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='billofmaterials_status', to='core.Status')),
            ],
            options={
                'db_table': 'bom',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BaseBomMaterial',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='bom_material_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('alloc_amt_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('used_amt_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('putback_amt_val', core.models.custom_types.ValField(blank=True, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='basebommaterial_actor', to='core.Actor')),
                ('bom', models.ForeignKey(blank=True, db_column='bom_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='bom_material_bom', to='core.BillOfMaterials')),
                ('composite_material', models.ForeignKey(blank=True, db_column='material_composite_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='bom_composite_material_composite_material', to='core.CompositeMaterial')),
                ('inventory_material', models.ForeignKey(blank=True, db_column='inventory_material_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='bom_material_inventory_material', to='core.InventoryMaterial')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='basebommaterial_status', to='core.Status')),
            ],
            options={
                'db_table': 'bom_material',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ActorPref',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='actor_pref_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('pkey', models.CharField(blank=True, max_length=255, null=True)),
                ('pvalue', models.CharField(blank=True, max_length=255, null=True)),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actorpref_actor', to='core.Actor')),
            ],
            options={
                'db_table': 'actor_pref',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='actor',
            name='organization',
            field=models.ForeignKey(blank=True, db_column='organization_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actor_organization', to='core.Organization'),
        ),
        migrations.AddField(
            model_name='actor',
            name='person',
            field=models.ForeignKey(blank=True, db_column='person_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actor_person', to='core.Person'),
        ),
        migrations.AddField(
            model_name='actor',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actor_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='actor',
            name='systemtool',
            field=models.ForeignKey(blank=True, db_column='systemtool_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actor_systemtool', to='core.Systemtool'),
        ),
        migrations.CreateModel(
            name='ActionUnit',
            fields=[
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('mod_date', models.DateTimeField(auto_now=True)),
                ('uuid', core.models.core_tables.RetUUIDField(db_column='action_material_uuid', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='action_unit_action', to='core.Action')),
                ('actor', models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actionunit_actor', to='core.Actor')),
                ('destination_material', models.ForeignKey(blank=True, db_column='destination_material_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='action_unit_destination_material', to='core.BaseBomMaterial')),
                ('source_material', models.ForeignKey(blank=True, db_column='source_material_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='action_unit_source_material', to='core.BaseBomMaterial')),
                ('status', models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actionunit_status', to='core.Status')),
            ],
            options={
                'ordering': ['add_date'],
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='actiondef',
            name='actor',
            field=models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actiondef_actor', to='core.Actor'),
        ),
        migrations.AddField(
            model_name='actiondef',
            name='parameter_def',
            field=models.ManyToManyField(blank=True, to='core.ParameterDef'),
        ),
        migrations.AddField(
            model_name='actiondef',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='actiondef_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='action',
            name='action_def',
            field=models.ForeignKey(blank=True, db_column='action_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='action_action_def', to='core.ActionDef'),
        ),
        migrations.AddField(
            model_name='action',
            name='actor',
            field=models.ForeignKey(blank=True, db_column='actor_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='action_actor', to='core.Actor'),
        ),
        migrations.AddField(
            model_name='action',
            name='calculation_def',
            field=models.ForeignKey(blank=True, db_column='calculation_def_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='action_calculation_def', to='core.CalculationDef'),
        ),
        migrations.AddField(
            model_name='action',
            name='parameter_def',
            field=models.ManyToManyField(blank=True, editable=False, to='core.ParameterDef'),
        ),
        migrations.AddField(
            model_name='action',
            name='status',
            field=models.ForeignKey(blank=True, db_column='status_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='action_status', to='core.Status'),
        ),
        migrations.AddField(
            model_name='action',
            name='workflow',
            field=models.ForeignKey(blank=True, db_column='workflow_uuid', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='action_workflow', to='core.Workflow'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('person', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='core.Person')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BomCompositeMaterial',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.basebommaterial',),
        ),
        migrations.CreateModel(
            name='BomMaterial',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.basebommaterial',),
        ),
        migrations.CreateModel(
            name='ExperimentInstance',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.experiment',),
        ),
        migrations.CreateModel(
            name='ExperimentTemplate',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.experiment',),
        ),
        migrations.AddField(
            model_name='basebommaterial',
            name='bom_material',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='bom_composite_material_bom_material', to='core.BomMaterial'),
        ),
    ]
